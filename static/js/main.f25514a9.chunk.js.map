{"version":3,"sources":["components/Description.js","App.js","hooks/useMousePosition.js","reportWebVitals.js","index.js"],"names":["Description","className","App","mousePosition","useState","x","y","position","setPosition","useEffect","setFromEvent","e","clientX","clientY","window","addEventListener","removeEventListener","useMousePosition","gridBoxRefs","useRef","gridBoxes","Array","keys","colorBoxClicked","setColorBoxClicked","colorCode","setColorCode","mixColors","setMixColors","getRGBValues","ref","color","style","background","split","isNaN","parseInt","substring","onMouseUp","onClick","backgroundColor","obj","gridColors","current","forEach","box","push","rgb","data","JSON","stringify","console","log","createJsonData","left","top","display","map","index","userSelect","onMouseDown","el","currentColorRGB","mixedColorRGB","Math","round","gridBoxClicked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f25514a9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Description() {\r\n  return (\r\n    <section className=\"description\">\r\n      <h2>Exercise:</h2>\r\n      <ol>\r\n        <li>\r\n          <strong>\r\n            As a user I want to drag colors onto a grid to fill a grid block\r\n            with that color.\r\n          </strong>\r\n          <p>This includes:</p>\r\n          <ul>\r\n            <li>dragging the color blocks</li>\r\n            <li>locking dragged color blocks to the grid frame when dropped</li>\r\n            <li>filling the grid space with the dropped color</li>\r\n            <li>\r\n              the dragged color should not be removed from the color toolbar\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <strong>\r\n            As a user I want to blend a new color with an existing color on the\r\n            grid to create a new color tone.\r\n          </strong>\r\n          <p>This includes:</p>\r\n          <ul>\r\n            <li>\r\n              If a color is dropped on a grid space which has already been\r\n              painted, then blend the new color with the existing color\r\n            </li>\r\n            <li>\r\n              This should also be possible on already blended colors on the grid\r\n            </li>\r\n            <li>Alpha channel is not required for blending purposes</li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <strong>\r\n            As a user I want to save my grid image to load it later.\r\n          </strong>\r\n          <p>This includes:</p>\r\n          <ul>\r\n            <li>create a JSON representation of the painted grid</li>\r\n            <li>create a way to show the JSON</li>\r\n            <li>\r\n              create a function which takes a JSON and sets the grid up\r\n              correspondingly\r\n            </li>\r\n            <li>provide a way to call this function with a JSON</li>\r\n          </ul>\r\n        </li>\r\n      </ol>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useMousePosition } from \"./hooks/useMousePosition\";\n\nimport Description from \"./components/Description\";\n\nfunction App() {\n  const mousePosition = useMousePosition();\n\n  const colorsBoxes = [\"red\", \"green\", \"blue\", \"black\"];\n\n  const gridBoxRefs = useRef([]);\n\n  var gridBoxes = [...Array(100).keys()];\n\n  const [colorBoxClicked, setColorBoxClicked] = useState(null);\n  const [colorCode, setColorCode] = useState(null);\n  const [mixColors, setMixColors] = useState(false);\n\n  useEffect(() => {\n    let colorCode;\n    switch (colorBoxClicked) {\n      case \"red\":\n        colorCode = [255, 0, 0];\n        break;\n      case \"green\":\n        colorCode = [0, 255, 0];\n        break;\n      case \"blue\":\n        colorCode = [0, 0, 255];\n        break;\n      case \"black\":\n        colorCode = [0, 0, 0];\n        break;\n      default:\n        break;\n    }\n    setColorCode(colorCode);\n  }, [colorBoxClicked]);\n\n  const gridBoxClicked = (index) => {\n    if (colorCode) {\n      let currentColorRGB = getRGBValues(gridBoxRefs.current[index]);\n      let mixedColorRGB = colorCode;\n\n      if (currentColorRGB !== null && mixColors) {\n        mixedColorRGB = [\n          Math.round((currentColorRGB[0] + colorCode[0]) / 2),\n          Math.round((currentColorRGB[1] + colorCode[1]) / 2),\n          Math.round((currentColorRGB[2] + colorCode[2]) / 2),\n        ];\n      }\n\n      gridBoxRefs.current[\n        index\n      ].style.background = `rgb(${mixedColorRGB[0]},${mixedColorRGB[1]},${mixedColorRGB[2]})`;\n    }\n  };\n\n  const getRGBValues = (ref) => {\n    let color = ref.style.background.split(\",\");\n    if (isNaN(color)) {\n      return [\n        parseInt(color[0].substring(4)),\n        parseInt(color[1]),\n        parseInt(color[2]),\n      ];\n    } else return null;\n  };\n\n  const createJsonData = () => {\n    let obj = {\n      gridColors: [],\n    };\n\n    gridBoxRefs.current.forEach((box) => {\n      obj.gridColors.push({ rgb: getRGBValues(box) });\n    });\n\n    const data = JSON.stringify(obj);\n    console.log(data);\n  };\n\n  return (\n    <div className=\"App\" onMouseUp={() => setColorBoxClicked(null)}>\n      <header>\n        <h1>Drag & Drop</h1>\n      </header>\n      <button\n        onClick={() => setMixColors(!mixColors)}\n        style={{\n          backgroundColor: mixColors ? \"black\" : \"white\",\n          color: mixColors ? \"white\" : \"black\",\n        }}\n      >\n        Mix colors\n      </button>\n      <button onClick={() => createJsonData()}>Create JSON data</button>\n      <div\n        className=\"drag-and-drop-color\"\n        style={{\n          left: mousePosition.x + 1,\n          top: mousePosition.y + 1,\n          display: colorBoxClicked !== null ? \"flex\" : \"none\",\n          backgroundColor:\n            colorCode && `rgb(${colorCode[0]},${colorCode[1]},${colorCode[2]})`,\n        }}\n      ></div>\n      <section className=\"playground\">\n        <ul className=\"colors\">\n          {colorsBoxes.map((color, index) => (\n            <li\n              className={color}\n              style={{ userSelect: \"none\" }}\n              key={index}\n              onMouseDown={() => setColorBoxClicked(color)}\n              onMouseUp={() => setColorBoxClicked(null)}\n            ></li>\n          ))}\n        </ul>\n        <div className=\"grid\" onMouseUp={() => setColorBoxClicked(null)}>\n          <ul>\n            {gridBoxes.map((box, index) => (\n              <li\n                key={index}\n                ref={(el) => (gridBoxRefs.current[index] = el)}\n                onMouseUp={() => gridBoxClicked(index)}\n              ></li>\n            ))}\n          </ul>\n        </div>\n      </section>\n      <Description />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useMousePosition = () => {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const setFromEvent = (e) => setPosition({ x: e.clientX, y: e.clientY });\r\n    window.addEventListener(\"mousemove\", setFromEvent);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", setFromEvent);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}